Asp.net core is a platform for creating web applications that includes web API

Web Applications are based on HTTP Request

Middleware pipline => Functions(Authint. & Authori., Exception Handling, Logins, ...) Process messages(Http Request) that come to server (Sequentional)

Filters => Another piplines that recording the diffs requests 

Security Context => Contains all the informations(username, emailAddresses, ..) that users have for security purpose

claims principle(Contains one or more identity of the user) => object represent security context of the user 

One person can have many types of identities 

One identity can contains many claims 

ex: Identity(driver license) => ClaimName, ClaimBirthdate, ClaimHeight

- Authorization looks at claims from the user and look at the page if the user have policy(requirements)

- claims provide information about a user, and roles define the user's access or permissions within a system. 
Roles are a specific type of claim, but claims can encompass a broader range of user-related information.

- Closing Browser => Killing the cookie

- HandleRequirementAsync Function(Who Call this method?) => When we inject HRManagerProbationRequirementHandler(Implement IAuthorizationHandler)
and when we run the program and the HttpRequest go to the Authorization Middleware(In this middleware we add logic that create object from 
HRManagerProbationRequirement), this middleware will call this method in runtime by Asp.Net Core Framework If the condition inside method is true
the authorization requirement is conidered satisfied(Context.succeed(requirement)) and access is granted.

- method<AnyThing>() => AnyThing is (To specify the return type).

- The Essential Parts in Asp.Net Core Identity (UI, Functionalities, Data Store).

- Token is a string(Hashing Algo, Claims, Hashed Claims), Then Don't put any sensetive information in Claims.






